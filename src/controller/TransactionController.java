// TransactionController.java
package controller;

import model.Database;
import model.PCBook;
import model.TransactionDetail;
import model.TransactionHeader;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Kelas yang bertanggung jawab untuk mengontrol operasi terkait transaksi pada aplikasi.
 */
public class TransactionController {
    private static final String DETAIL_TABLE_NAME = "TransactionDetail";
    private static final String HEADER_TABLE_NAME = "TransactionHeader";
    private static final String USER_TABLE_NAME = "User";

    /**
     * Menambahkan transaksi baru ke dalam database.
     * @param pcBookList Daftar komputer yang terlibat dalam transaksi.
     * @param staffID ID staf yang melakukan transaksi.
     * @return true jika penambahan transaksi berhasil, false sebaliknya.
     */
    public boolean addTransaction(List<PCBook> pcBookList, int staffID) {
        try {
            Database database = Database.getInstance();
            Connection connection = database.getConnection();
            connection.setAutoCommit(false);

            // Insert into TransactionHeader
            String headerInsertQuery = "INSERT INTO " + HEADER_TABLE_NAME + " (UserID, StaffName, TransactionDate) VALUES (?, ?, NOW())";
            try (PreparedStatement headerPreparedStatement = connection.prepareStatement(headerInsertQuery, Statement.RETURN_GENERATED_KEYS)) {
                headerPreparedStatement.setInt(1, staffID);
                headerPreparedStatement.setString(2, getUserRole(staffID));

                int headerRowsAffected = headerPreparedStatement.executeUpdate();
                if (headerRowsAffected == 0) {
                    connection.rollback();
                    return false;
                }

                // Get the autogenerated TransactionID
                try (ResultSet generatedKeys = headerPreparedStatement.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        int transactionID = generatedKeys.getInt(1);

                        // Insert into TransactionDetail
                        String detailInsertQuery = "INSERT INTO " + DETAIL_TABLE_NAME + " (TransactionID, PC_ID, CustomerName, BookedDate) VALUES (?, ?, ?, NOW())";
                        try (PreparedStatement detailPreparedStatement = connection.prepareStatement(detailInsertQuery)) {
                            for (PCBook pcBook : pcBookList) {
                                detailPreparedStatement.setInt(1, transactionID);
                                detailPreparedStatement.setInt(2, pcBook.getPCID());
                                detailPreparedStatement.setString(3, getCustomerName(pcBook.getUserID()));

                                int detailRowsAffected = detailPreparedStatement.executeUpdate();
                                if (detailRowsAffected == 0) {
                                    connection.rollback();
                                    return false;
                                }
                            }
                        }
                    } else {
                        connection.rollback();
                        return false;
                    }
                }
            }

            connection.commit();
            return true;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Mendapatkan seluruh data header transaksi dari database.
     * @return List yang berisi objek-objek TransactionHeader yang mewakili seluruh data header transaksi.
     */
    public List<TransactionHeader> getAllTransactionHeaderData() {
        List<TransactionHeader> transactionHeaders = new ArrayList<>();

        try {
            Database database = Database.getInstance();
            Connection connection = database.getConnection();

            String query = "SELECT * FROM " + HEADER_TABLE_NAME;

            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    while (resultSet.next()) {
                        transactionHeaders.add(mapResultSetToTransactionHeader(resultSet));
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return transactionHeaders;
    }

    /**
     * Mendapatkan seluruh data detail transaksi dari database berdasarkan ID transaksi.
     * @param transactionID ID transaksi yang akan dicari.
     * @return List yang berisi objek-objek TransactionDetail yang mewakili seluruh data detail transaksi.
     */
    public List<TransactionDetail> getAllTransactionDetail(int transactionID) {
        List<TransactionDetail> transactionDetails = new ArrayList<>();

        try {
            Database database = Database.getInstance();
            Connection connection = database.getConnection();

            String query = "SELECT * FROM " + DETAIL_TABLE_NAME + " WHERE TransactionID = ?";

            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setInt(1, transactionID);

                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    while (resultSet.next()) {
                        transactionDetails.add(mapResultSetToTransactionDetail(resultSet));
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return transactionDetails;
    }

    /**
     * Mendapatkan seluruh data detail transaksi dari database berdasarkan ID pengguna.
     * @param userID ID pengguna yang akan dicari transaksinya.
     * @return List yang berisi objek-objek TransactionDetail yang mewakili seluruh data detail transaksi pengguna.
     */
    public List<TransactionDetail> getUserTransactionDetail(int userID) {
        List<TransactionDetail> userTransactionDetails = new ArrayList<>();

        try {
            Database database = Database.getInstance();
            Connection connection = database.getConnection();

            String query = "SELECT * FROM " + DETAIL_TABLE_NAME + " WHERE CustomerName = ?";

            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, getCustomerName(userID));

                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    while (resultSet.next()) {
                        userTransactionDetails.add(mapResultSetToTransactionDetail(resultSet));
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return userTransactionDetails;
    }

    /**
     * Mengonversi hasil query database menjadi objek TransactionHeader.
     * @param resultSet Hasil query database.
     * @return Objek TransactionHeader yang sesuai dengan hasil query.
     * @throws SQLException Jika terjadi kesalahan saat membaca hasil query.
     */
    private TransactionHeader mapResultSetToTransactionHeader(ResultSet resultSet) throws SQLException {
        int transactionID = resultSet.getInt("TransactionID");
        int userID = resultSet.getInt("UserID");
        String staffName = resultSet.getString("StaffName");
        String transactionDate = resultSet.getString("TransactionDate");

        return new TransactionHeader(transactionID, userID, staffName, transactionDate);
    }

    /**
     * Mengonversi hasil query database menjadi objek TransactionDetail.
     * @param resultSet Hasil query database.
     * @return Objek TransactionDetail yang sesuai dengan hasil query.
     * @throws SQLException Jika terjadi kesalahan saat membaca hasil query.
     */
    private TransactionDetail mapResultSetToTransactionDetail(ResultSet resultSet) throws SQLException {
        int pcID = resultSet.getInt("PC_ID");
        String customerName = resultSet.getString("CustomerName");
        String bookedDate = resultSet.getString("BookedDate");

        return new TransactionDetail(pcID, customerName, bookedDate);
    }

    /**
     * Mendapatkan peran pengguna berdasarkan ID pengguna.
     * @param userID ID pengguna yang akan dicari perannya.
     * @return Peran pengguna (UserRole).
     */
    private String getUserRole(int userID) {
        try {
            Database database = Database.getInstance();
            Connection connection = database.getConnection();

            String query = "SELECT UserRole FROM " + USER_TABLE_NAME + " WHERE UserID = ?";

            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setInt(1, userID);

                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        return resultSet.getString("UserRole");
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return null;
    }

    /**
     * Mendapatkan nama pelanggan berdasarkan ID pengguna.
     * @param userID ID pengguna yang akan dicari namanya.
     * @return Nama pelanggan.
     */
    private String getCustomerName(int userID) {
        try {
            Database database = Database.getInstance();
            Connection connection = database.getConnection();

            String query = "SELECT UserName FROM " + USER_TABLE_NAME + " WHERE UserID = ?";

            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setInt(1, userID);

                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        return resultSet.getString("UserName");
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return null;
    }
}
